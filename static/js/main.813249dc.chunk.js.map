{"version":3,"sources":["components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationBrand/NavigationBrand.js","components/Navigation/NavigationItems/NavigationItems.js","axios-nyt.js","containers/AngLeeDashBoard/Pages/NewYorkTimes/NewYorkTimes.js","containers/AngLeeDashBoard/AngLeeDashBoard.js","App.js","serviceWorker.js","index.js"],"names":["navigationItem","props","react_default","a","createElement","className","NavLink","to","link","exact","children","navigationBrand","navigationItems","NavigationBrand","NavigationItem","instance","axios","create","baseURL","AngLeeDashBoard","state","articles","apiKey","page","error","searchQuery","this","_this2","get","then","response","console","log","data","catch","setState","Component","NavigationItems","Switch","Route","path","component","NewYorkTimes","App","BrowserRouter","containers_AngLeeDashBoard_AngLeeDashBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAceA,EAXQ,SAACC,GAAD,OACnBC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACID,UAAU,WACVE,GAAIN,EAAMO,KACVC,MAAOR,EAAMQ,OACfR,EAAMS,YCGDC,EATS,SAACV,GAAD,OACpBC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACID,UAAU,eACVE,GAAIN,EAAMO,KACVC,MAAOR,EAAMQ,OACfR,EAAMS,WCSGE,EAbS,kBACpBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAACS,EAAD,CAAiBL,KAAK,oBAAoBC,OAAK,GAA/C,uBACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACVH,EAAAC,EAAAC,cAACU,EAAD,CAAgBN,KAAK,4BAA4BC,OAAK,GAAtD,WACAP,EAAAC,EAAAC,cAACU,EAAD,CAAgBN,KAAK,4BAA4BC,OAAK,GAAtD,kBACAP,EAAAC,EAAAC,cAACU,EAAD,CAAgBN,KAAK,+BAA+BC,OAAK,GAAzD,0BCLDM,SAJEC,EAAMC,OAAO,CAC1BC,QAAS,0CCiCEC,6MAhCXC,MAAQ,CACJC,SAAU,GACVC,OAAQ,mCACRC,KAAM,EACNC,OAAO,+EAGEC,EAAaF,GAGtB,MAFgB,6DACD,WAAaG,KAAKN,MAAME,QACb,MAAQG,EAAc,SAAWF,8CAG3C,IAAAI,EAAAD,KAEhBV,EAAMY,IAAI,wHACLC,KAAK,SAAAC,GACFC,QAAQC,IAAIF,EAASG,QAGxBC,MAAM,SAAAV,GACHG,EAAKQ,SAAS,CAAEX,OAAO,uCAK/B,OACItB,EAAAC,EAAAC,cAAA,qDA5BkBgC,aCqCfjB,mLAjCP,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAACiC,EAAD,OAEJnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACIpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACIC,KAAK,qBACL/B,OAAK,EACLgC,UAAY,kBAAMvC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,oCAGtBH,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACIC,KAAK,4BACL/B,OAAK,EACLgC,UAAY,kBAAMvC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eAEtBH,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACIC,KAAK,4BACL/B,OAAK,EACLgC,UAAYC,IAEhBxC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACIC,KAAK,+BACL/B,OAAK,EACLgC,UAAY,kBAAMvC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,2BA3BZ+B,aCWfO,mLAVX,OACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyC,EAAD,eALQT,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.813249dc.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst navigationItem = (props) => (\n    <li className='nav-item'>\n        <NavLink\n            className='nav-link'\n            to={props.link}\n            exact={props.exact}\n        >{props.children}\n        </NavLink>\n    </li>\n);\n\nexport default navigationItem;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst navigationBrand = (props) => (\n    <NavLink\n        className='navbar-brand'\n        to={props.link}\n        exact={props.exact}\n    >{props.children}\n    </NavLink>\n);\n\nexport default navigationBrand;","import React from 'react';\nimport NavigationItem from './NavigationItem/NavigationItem';\nimport NavigationBrand from './NavigationBrand/NavigationBrand';\n\nconst navigationItems = () => (\n    <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n        <NavigationBrand link=\"/anglee-dashboard\" exact> Ang Lee Dashboard </NavigationBrand>\n        <div className='navbar-collapse justify-content-end' >\n            <ul className='nav navbar-nav'>\n                <NavigationItem link=\"/anglee-dashboard/chicago\" exact>Chicago</NavigationItem>\n                <NavigationItem link=\"/anglee-dashboard/newyork\" exact>New York Times</NavigationItem>\n                <NavigationItem link=\"/anglee-dashboard/washington\" exact>Washington</NavigationItem>\n            </ul>\n        </div>\n    </nav>\n);\n\nexport default navigationItems;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.nytimes.com/svc/search/v2'\n});\n\nexport default instance;","import React, {Component} from 'react';\nimport axios from '../../../../axios-nyt';\n\nclass AngLeeDashBoard extends Component {\n    state = {\n        articles: [],\n        apiKey: 'OQr3kIYAhimfbgYm72j0lSCmIJuahUkd',\n        page: 1,\n        error: false\n    }\n\n    getSearchUrl(searchQuery, page) {\n        const baseUrl = 'https://api.nytimes.com/svc/search/v2/articlesearch.json?';\n        const apiKey = 'api-key=' + this.state.apiKey;\n        return baseUrl + apiKey + '&q=' + searchQuery + '&page=' + page;\n    }\n\n    componentDidMount() {\n        // axios.get(this.getSearchUrl('Ang Lee', this.state.page))\n        axios.get('https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=OQr3kIYAhimfbgYm72j0lSCmIJuahUkd&q=Ang%20Lee&page=1')\n            .then(response => {\n                console.log(response.data);\n\n            })\n            .catch(error => {\n                this.setState({ error: true });\n            });\n    }\n\n    render() {\n        return (\n            <h1>This is the New York Times page!</h1>\n        )\n    }\n}\n\nexport default AngLeeDashBoard;","import React, { Component } from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport NavigationItems from '../../components/Navigation/NavigationItems/NavigationItems';\nimport NewYorkTimes from './Pages/NewYorkTimes/NewYorkTimes';\n\nclass AngLeeDashBoard extends Component {\n    render() {\n        return (\n            <div className='AngLeeDashBoard'>\n                <header>\n                    <NavigationItems></NavigationItems>\n                </header>\n                <Switch>\n                    <Route \n                        path='/anglee-dashboard/'\n                        exact\n                        component= {() => <h1 className='text-center'> Welcome to AngLeeDashBoard !</h1>}\n                    ></Route>\n\n                    <Route \n                        path='/anglee-dashboard/chicago'\n                        exact\n                        component= {() => <h1 className='text-center'> Chicago</h1>}\n                    ></Route>\n                    <Route \n                        path='/anglee-dashboard/newyork'\n                        exact\n                        component= {NewYorkTimes}\n                    ></Route>\n                    <Route \n                        path='/anglee-dashboard/washington'\n                        exact\n                        component= {() => <h1 className='text-center'> Washington</h1>}\n                    ></Route>\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default AngLeeDashBoard;","import React, { Component } from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport AngLeeDashBoard from './containers/AngLeeDashBoard/AngLeeDashBoard';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className='App'>\n          <AngLeeDashBoard></AngLeeDashBoard>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\n// import $ from 'jquery';\n// import Popper from 'popper.js'; \n// import 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}